#
#  cfg file for example that demonstrates two ways of gettnig corrected jets.
#  1) Corrected Collection: produces a collection of corected CaloJets and makes plots from them.
#  2) Correction Service: accesses the jet correction itself, and corrects CaloJets "on the fly"
#     without creating a collection of corrected CaloJets.
#
process JetPlots = {
    
  # Specify the input files
  source = PoolRASource { 
    untracked int32 maxEvents = -1
    untracked vstring fileNames = {'/store/mc/2007/4/26/Spring07-QCD_Pt_470_600-1288/0000/242E9461-04F9-DB11-89BC-001125C472E4.root' }
  }	    

  # Declare the possible kinds of corJets: possible collections of corrected calojets and
  # also the correction services that allows user to correct jets on the fly.
  # Here we use the Spring07 jet corrections.
   include "JetMETCorrections/MCJet/data/MCJetCorrectionsSpring07.cff"

 # Pick MCJetCorrectionService to set record's IOV
   es_prefer MCJetCorrectorMcone5 = MCJetCorrectionService {}
  
  # Specify the jet algorithms for the collections we will read, and which jet correction service
  module plots = CorJetsExample {
    string CaloJetAlgorithm ="midPointCone5CaloJets"
    string CorJetAlgorithm = "MCJetCorJetMcone5"
    string JetCorrectionService = "MCJetCorrectorMcone5"
    string GenJetAlgorithm = "midPointCone5GenJets"
  }

  module evtInfo = AsciiOutputModule { 
  }

  # In the path below MCJetCorJetMcone5 is only necessary for the corrected CaloJet collections
  # to be written to event, it is not necessary for the correction service to
  # be available to allows for jets to be corrected on the fly.
  path p = { MCJetCorJetMcone5, plots }

  endpath ep = {
    evtInfo
  }
}
