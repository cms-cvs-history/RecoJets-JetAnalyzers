#
#  cfg file for example that demonstrates two ways of getting corrected jets.
#  1) Corrected Collection: produces a collection of corected CaloJets and makes plots from them.
#  2) Correction Service: accesses the jet correction itself, and corrects CaloJets "on the fly"
#     without creating a collection of corrected CaloJets.
#
process JetPlots = {
    
  # Specify the input files
  source = PoolRASource { 
    untracked vstring fileNames = {'file:/uscms_data/d1/cmsjtmet/kkousour/new/Compressed_sample5_0.root'}
  }	    
  untracked PSet maxEvents = {untracked int32 input = -1}

  # Declare the possible kinds of corJets: possible collections of corrected calojets and
  # also the correction services that allows user to correct jets on the fly.
  # Here we use the Spring07 jet corrections.
   include "JetMETCorrections/MCJet/data/MCJetCorrectionsSisCone152.cff"

 # Pick MCJetCorrectionService to set record's IOV
   es_prefer MCJetCorrectorMcone5 = MCJetCorrectionService {}
  
  # Specify the jet algorithms for the collections we will read, and which jet correction service
  module plots = CorJetsExample {
    string CaloJetAlgorithm ="sisCone5CaloJets"
    string CorJetAlgorithm = "MCJetCorJetScone5"
    string JetCorrectionService = "MCJetCorrectorScone5"
    string GenJetAlgorithm = "sisCone5GenJets"
  }

  module evtInfo = AsciiOutputModule { 
  }

  # In the path below MCJetCorJetMcone5 is only necessary for the corrected CaloJet collections
  # to be written to event, it is not necessary for the correction service to
  # be available to allows for jets to be corrected on the fly.
  path p = { MCJetCorJetScone5, plots }

  endpath ep = {
    evtInfo
  }
}
